import math
import time
import tkinter as tk
from tkinter import Canvas

class RotatingCube3D:
    def __init__(self, root):
        self.root = root
        self.root.title("3D –í—Ä–∞—â–∞—é—â–∏–π—Å—è –ö—É–± - Python")
        self.root.geometry("800x600")
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç
        self.canvas = Canvas(root, width=800, height=600, bg="black")
        self.canvas.pack()
        
        # –í–µ—Ä—à–∏–Ω—ã –∫—É–±–∞ –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        self.vertices = [
            [-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1],
            [-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]
        ]
        
        # –ì—Ä–∞–Ω–∏ –∫—É–±–∞ (–∏–Ω–¥–µ–∫—Å—ã –≤–µ—Ä—à–∏–Ω)
        self.faces = [
            [0, 1, 2, 3], [4, 5, 6, 7], [0, 1, 5, 4],
            [2, 3, 7, 6], [0, 3, 7, 4], [1, 2, 6, 5]
        ]
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–Ω–µ–π
        self.colors = ["#ff0000", "#00ff00", "#0000ff", 
                      "#ffff00", "#ff00ff", "#00ffff"]
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        self.angle_x = 0
        self.angle_y = 0
        self.angle_z = 0
        self.scale = 100
        self.center_x = 400
        self.center_y = 300
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_controls()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.animate()
    
    def create_controls(self):
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        control_frame = tk.Frame(self.root, bg="gray")
        control_frame.place(x=10, y=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        tk.Button(control_frame, text="‚ñÆ‚ñÆ –ü–∞—É–∑–∞", command=self.toggle_pause, 
                 bg="lightblue", font=("Arial", 10)).pack(pady=2)
        tk.Button(control_frame, text="üåÄ –°–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞", command=self.random_colors,
                 bg="lightgreen", font=("Arial", 10)).pack(pady=2)
        tk.Button(control_frame, text="üîÑ –°–±—Ä–æ—Å", command=self.reset,
                 bg="lightcoral", font=("Arial", 10)).pack(pady=2)
        
        # –ú–µ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.info_label = tk.Label(self.root, text="", bg="black", fg="white", 
                                  font=("Courier", 10))
        self.info_label.place(x=10, y=550)
        
        self.paused = False
    
    def rotate_point(self, point, angle_x, angle_y, angle_z):
        x, y, z = point
        
        # –í—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ X
        y_rot = y * math.cos(angle_x) - z * math.sin(angle_x)
        z_rot = y * math.sin(angle_x) + z * math.cos(angle_x)
        y, z = y_rot, z_rot
        
        # –í—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ Y
        x_rot = x * math.cos(angle_y) + z * math.sin(angle_y)
        z_rot = -x * math.sin(angle_y) + z * math.cos(angle_y)
        x, z = x_rot, z_rot
        
        # –í—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ Z
        x_rot = x * math.cos(angle_z) - y * math.sin(angle_z)
        y_rot = x * math.sin(angle_z) + y * math.cos(angle_z)
        x, y = x_rot, y_rot
        
        return [x, y, z]
    
    def project_point(self, point):
        x, y, z = point
        # –ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è
        factor = 400 / (400 + z * 3)
        x_proj = x * factor * self.scale + self.center_x
        y_proj = y * factor * self.scale + self.center_y
        return x_proj, y_proj
    
    def draw_cube(self):
        self.canvas.delete("all")
        
        # –†–∏—Å—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ –æ—Å–∏
        self.draw_axes()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –ø—Ä–æ–µ—Ü–∏—Ä—É–µ–º –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã
        projected_vertices = []
        for vertex in self.vertices:
            rotated = self.rotate_point(vertex, self.angle_x, self.angle_y, self.angle_z)
            projected_vertices.append(self.project_point(rotated))
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏ —Å —É—á–µ—Ç–æ–º –≥–ª—É–±–∏–Ω—ã
        faces_with_depth = []
        for i, face in enumerate(self.faces):
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≥–ª—É–±–∏–Ω—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            z_sum = sum(self.vertices[vertex][2] for vertex in face)
            faces_with_depth.append((z_sum, i, face))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏ –ø–æ –≥–ª—É–±–∏–Ω–µ (–∑–∞–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        faces_with_depth.sort()
        
        for depth, face_idx, face in faces_with_depth:
            points = [projected_vertices[vertex] for vertex in face]
            
            # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω—å
            self.canvas.create_polygon(
                points, fill=self.colors[face_idx], outline="white", width=2
            )
            
            # –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—à–∏–Ω
            for vertex in face:
                x, y = projected_vertices[vertex]
                self.canvas.create_text(x, y, text=str(vertex), fill="white", font=("Arial", 8))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = f"–£–≥–ª—ã: X={math.degrees(self.angle_x):.1f}¬∞ Y={math.degrees(self.angle_y):.1f}¬∞ Z={math.degrees(self.angle_z):.1f}¬∞"
        self.info_label.config(text=info_text)
    
    def draw_axes(self):
        # –û—Å—å X (–∫—Ä–∞—Å–Ω–∞—è)
        self.canvas.create_line(50, 550, 150, 550, arrow=tk.LAST, fill="red", width=2)
        self.canvas.create_text(160, 550, text="X", fill="red", font=("Arial", 12))
        
        # –û—Å—å Y (–∑–µ–ª–µ–Ω–∞—è)
        self.canvas.create_line(50, 550, 50, 450, arrow=tk.LAST, fill="green", width=2)
        self.canvas.create_text(50, 440, text="Y", fill="green", font=("Arial", 12))
        
        # –û—Å—å Z (—Å–∏–Ω—è—è)
        self.canvas.create_line(50, 550, 100, 500, arrow=tk.LAST, fill="blue", width=2)
        self.canvas.create_text(110, 490, text="Z", fill="blue", font=("Arial", 12))
    
    def animate(self):
        if not self.paused:
            self.angle_x += 0.01
            self.angle_y += 0.015
            self.angle_z += 0.005
            
            self.draw_cube()
        
        self.root.after(16, self.animate)  # ~60 FPS
    
    def toggle_pause(self):
        self.paused = not self.paused
    
    def random_colors(self):
        import random
        self.colors = [
            f"#{random.randint(0, 255):02x}{random.randint(0, 255):02x}{random.randint(0, 255):02x}"
            for _ in range(6)
        ]
    
    def reset(self):
        self.angle_x = 0
        self.angle_y = 0
        self.angle_z = 0
        self.colors = ["#ff0000", "#00ff00", "#0000ff", 
                      "#ffff00", "#ff00ff", "#00ffff"]
        self.paused = False

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = RotatingCube3D(root)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    def on_key_press(event):
        if event.keysym == 'space':
            app.toggle_pause()
        elif event.keysym == 'r':
            app.random_colors()
        elif event.keysym == 'c':
            app.reset()
    
    root.bind('<KeyPress>', on_key_press)
    root.focus_set()
    
    root.mainloop()