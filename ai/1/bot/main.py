import os
import logging
from datetime import datetime
from typing import Dict, List, Tuple

import requests
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler
)

# ---------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("rates-bot")

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BASE_CURRENCY = os.getenv("BASE_CURRENCY", "TJS").upper()
TARGETS = set(os.getenv("TARGETS", "USD,EUR,KZT,RUB").replace(" ", "").upper().split(","))
EXCHANGE_API_KEY = os.getenv("EXCHANGE_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

SUBSCRIBERS_FILE = "subscribers.txt"


# ---------------- –£–¢–ò–õ–ò–¢–´ ----------------
def get_subscribers() -> List[int]:
    if not os.path.exists(SUBSCRIBERS_FILE):
        return []
    with open(SUBSCRIBERS_FILE, "r") as f:
        return [int(x.strip()) for x in f if x.strip().isdigit()]


def add_subscriber(user_id: int):
    subs = set(get_subscribers())
    subs.add(user_id)
    with open(SUBSCRIBERS_FILE, "w") as f:
        for s in subs:
            f.write(f"{s}\n")


def remove_subscriber(user_id: int):
    subs = set(get_subscribers())
    subs.discard(user_id)
    with open(SUBSCRIBERS_FILE, "w") as f:
        for s in subs:
            f.write(f"{s}\n")


# ---------------- API ----------------
def fetch_rates(base: str, symbols: List[str]) -> Tuple[Dict[str, float], str]:
    url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/{base}"
    resp = requests.get(url, timeout=10)
    data = resp.json()

    if data.get("result") != "success":
        raise ValueError(f"–û—à–∏–±–∫–∞ API: {data.get('error-type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}")

    rates = data["conversion_rates"]
    updated = data.get("time_last_update_utc", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    return {s: rates[s] for s in symbols if s in rates}, updated


# ---------------- –ú–ï–ù–Æ ----------------
def main_menu_keyboard(is_admin=False):
    keyboard = [
        [InlineKeyboardButton("üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="show_rates")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [
            InlineKeyboardButton("üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe"),
            InlineKeyboardButton("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe"),
        ],
        [InlineKeyboardButton("üí¨ –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    if is_admin:
        keyboard.append([InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(keyboard)


def settings_menu_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üá∫üá∏ USD", callback_data="base_USD"),
            InlineKeyboardButton("üá™üá∫ EUR", callback_data="base_EUR"),
            InlineKeyboardButton("üáπüáØ TJS", callback_data="base_TJS"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)


def admin_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="admin_subs")],
        [InlineKeyboardButton("üì§ –†–∞–∑–æ—Å–ª–∞—Ç—å –∫—É—Ä—Å—ã", callback_data="admin_sendnow")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(keyboard)


# ---------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ----------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
        "–Ø –≤–∞–ª—é—Ç–Ω—ã–π –±–æ—Ç. –£–∑–Ω–∞–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –ø–æ–ª—É—á–∞–π —Ä–∞—Å—Å—ã–ª–∫—É üì¨"
    )
    is_admin = (user_id == ADMIN_ID)
    await update.message.reply_text(msg, parse_mode="HTML", reply_markup=main_menu_keyboard(is_admin))


async def rates_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        rates, updated = fetch_rates(BASE_CURRENCY, list(TARGETS))
        text = f"üìä <b>–ö—É—Ä—Å—ã –∫ {BASE_CURRENCY}</b>\nüïì –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n\n"
        for s, v in rates.items():
            text += f"üí∞ 1 <b>{s}</b> = <b>{v:.4f}</b> {BASE_CURRENCY}\n"
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=main_menu_keyboard(query.from_user.id == ADMIN_ID))
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu_keyboard(query.from_user.id == ADMIN_ID))


async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(f"‚öôÔ∏è –¢–µ–∫—É—â–∞—è –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: <b>{BASE_CURRENCY}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é:", parse_mode="HTML", reply_markup=settings_menu_keyboard())


async def set_base_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global BASE_CURRENCY
    query = update.callback_query
    await query.answer()
    BASE_CURRENCY = query.data.split("_")[1]
    await query.edit_message_text(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{BASE_CURRENCY}</b>", parse_mode="HTML", reply_markup=main_menu_keyboard(query.from_user.id == ADMIN_ID))


async def subscribe_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    add_subscriber(query.from_user.id)
    await query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")
    await query.edit_message_text("üì¨ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.", reply_markup=main_menu_keyboard(query.from_user.id == ADMIN_ID))


async def unsubscribe_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    remove_subscriber(query.from_user.id)
    await query.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å ‚ùå")
    await query.edit_message_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", reply_markup=main_menu_keyboard(query.from_user.id == ADMIN_ID))


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üí¨ <b>–ü–æ–º–æ—â—å:</b>\n\n"
        "üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã.\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –≤—ã–±—Ä–∞—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É.\n"
        "üì¨ –ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=main_menu_keyboard(query.from_user.id == ADMIN_ID))


# ---------------- –ê–î–ú–ò–ù ----------------
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_ID:
        await query.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    text = "üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=admin_menu_keyboard())


async def admin_show_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    subs = get_subscribers()
    if subs:
        msg = f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subs)}\n\n" + "\n".join([f"‚Ä¢ {s}" for s in subs])
    else:
        msg = "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."
    await query.edit_message_text(msg, reply_markup=admin_menu_keyboard())


async def admin_sendnow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ ‚úÖ")

    subs = get_subscribers()
    if not subs:
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=admin_menu_keyboard())
        return

    try:
        rates, updated = fetch_rates(BASE_CURRENCY, list(TARGETS))
        text = f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\nüïì {updated}\n\n"
        for s, v in rates.items():
            text += f"üí∞ 1 <b>{s}</b> = <b>{v:.4f}</b> {BASE_CURRENCY}\n"
        for uid in subs:
            try:
                await context.bot.send_message(chat_id=uid, text=text, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
        await query.edit_message_text("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", reply_markup=admin_menu_keyboard())
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", reply_markup=admin_menu_keyboard())


# ---------------- –ó–ê–ü–£–°–ö ----------------
def main():
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_handler))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(rates_handler, pattern="show_rates"))
    app.add_handler(CallbackQueryHandler(settings_handler, pattern="settings"))
    app.add_handler(CallbackQueryHandler(set_base_handler, pattern="base_"))
    app.add_handler(CallbackQueryHandler(subscribe_handler, pattern="subscribe"))
    app.add_handler(CallbackQueryHandler(unsubscribe_handler, pattern="unsubscribe"))
    app.add_handler(CallbackQueryHandler(help_handler, pattern="help"))
    app.add_handler(CallbackQueryHandler(admin_panel, pattern="admin_panel"))
    app.add_handler(CallbackQueryHandler(admin_show_subs, pattern="admin_subs"))
    app.add_handler(CallbackQueryHandler(admin_sendnow, pattern="admin_sendnow"))
    app.add_handler(CallbackQueryHandler(start_handler, pattern="back_main"))

    # üí§ –í—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –∞–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏ (JobQueue –æ—Ç–∫–ª—é—á—ë–Ω)
    logger.info("üïì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (JobQueue –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).")

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é.")
    app.run_polling()


if __name__ == "__main__":
    main()
