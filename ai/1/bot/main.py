import os
import logging
from datetime import datetime, timezone
from typing import Dict, List, Tuple

import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("rates-bot")

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BASE_CURRENCY = os.getenv("BASE_CURRENCY", "TJS").upper()
TARGETS = set(os.getenv("TARGETS", "USD,EUR,KZT,RUB").replace(" ", "").upper().split(","))

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ ---
def fetch_rates(base: str, symbols: List[str]) -> Tuple[Dict[str, float], str]:
    url = "https://api.exchangerate.host/latest"
    params = {"base": base, "symbols": ",".join(symbols)}
    resp = requests.get(url, params=params, timeout=10)
    resp.raise_for_status()
    data = resp.json()

    if not data or "rates" not in data:
        raise ValueError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    rates = {}
    for s in symbols:
        val = data["rates"].get(s)
        if val:
            rates[s] = val
    updated = data.get("date", datetime.now(timezone.utc).strftime("%Y-%m-%d"))
    return rates, updated


# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = (
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞–ª—é—Ç–Ω—ã–π –±–æ—Ç.\n"
        f"–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {BASE_CURRENCY}\n"
        f"–û—Ç—Å–ª–µ–∂–∏–≤–∞—é: {', '.join(TARGETS)}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/rates ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã\n"
        f"/setbase <–≤–∞–ª—é—Ç–∞> ‚Äì —Å–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É\n"
        f"/add <–≤–∞–ª—é—Ç–∞> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É –≤ —Å–ø–∏—Å–æ–∫\n"
        f"/remove <–≤–∞–ª—é—Ç–∞> ‚Äì —É–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        f"/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        f"/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    await update.message.reply_text(msg)


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å\n"
        "/rates ‚Äì –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
        "/setbase <–≤–∞–ª—é—Ç–∞> ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É\n"
        "/add <–≤–∞–ª—é—Ç–∞> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É\n"
        "/remove <–≤–∞–ª—é—Ç–∞> ‚Äì —É–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É\n"
        "/list ‚Äì —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    )


async def list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {BASE_CURRENCY}\n"
        f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(TARGETS)}"
    )


async def rates_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        rates, updated = fetch_rates(BASE_CURRENCY, list(TARGETS))
        lines = [f"üìä –ö—É—Ä—Å—ã –∫ {BASE_CURRENCY} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated}):"]
        for s, val in rates.items():
            lines.append(f"1 {s} = {val:.4f} {BASE_CURRENCY}")
        await update.message.reply_text("\n".join(lines))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


async def setbase_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global BASE_CURRENCY
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbase <–≤–∞–ª—é—Ç–∞>")
        return
    BASE_CURRENCY = context.args[0].upper()
    await update.message.reply_text(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {BASE_CURRENCY}")


async def add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global TARGETS
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–≤–∞–ª—é—Ç–∞>")
        return
    TARGETS.add(context.args[0].upper())
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ {context.args[0].upper()}")


async def remove_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global TARGETS
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove <–≤–∞–ª—é—Ç–∞>")
        return
    cur = context.args[0].upper()
    if cur in TARGETS:
        TARGETS.remove(cur)
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ {cur}")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è {cur} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main() -> None:
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("list", list_handler))
    app.add_handler(CommandHandler("rates", rates_handler))
    app.add_handler(CommandHandler("setbase", setbase_handler))
    app.add_handler(CommandHandler("add", add_handler))
    app.add_handler(CommandHandler("remove", remove_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()


if __name__ == "__main__":
    main()
